"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _util = require("@polkadot/util");

var _utilCrypto = require("@polkadot/util-crypto");

var _Enum = _interopRequireDefault(require("../codec/Enum"));

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
class MultiAddress extends _Enum.default {
  constructor(registry, value) {
    super(registry, {
      Id: 'AccountId',
      Index: 'Compact<AccountIndex>',
      Raw: 'Bytes',
      // eslint-disable-next-line sort-keys
      Address32: 'H256',
      // eslint-disable-next-line sort-keys
      Address20: 'H160'
    }, MultiAddress._decodeMultiAddress(value));
  }

  static _decodeMultiAddress(value) {
    if ((0, _util.isString)(value)) {
      try {
        const u8a = (0, _utilCrypto.decodeAddress)(value.toString());
        return (0, _util.u8aConcat)(new Uint8Array(u8a.length <= 8 ? 1 : 0), u8a);
      } catch (error) {// ignore, not a valid ss58 address
      }
    }

    return value;
  }
  /**
   * @description Returns the string representation of the value
   */


  toString() {
    return this.value.toString();
  }

}

exports.default = MultiAddress;