{"version":3,"sources":["index.js"],"names":["DEFAULTS","BASE_TEN","FAILOVER_ERROR_CODES","HTTP_ERROR_CODE_RETRY_THRESHHOLD","HTTP_ERROR_CODE_THRESHHOLD","HTTP_PORT","HTTPS_PORT","MAX_REDIRECT_COUNT","MAX_RETRY_COUNT","TIMEOUT","EVENTS","error","redirect","request","response","retry","HTTP_HEADERS","CONNECTION","CONTENT_LENGTH","CONTENT_TYPE","HOST","LOCATION","HTTP_STATUS_CODES","NO_CONTENT","PROXY_REQUIRED","REDIRECT_CODE_PERM","REDIRECT_CODE_TEMP","REDIRECT_NEW_CODE_PERM","REDIRECT_NEW_CODE_TEMP","RE_CHARSET","RE_CONTENT_TYPE_JSON","RE_CONTENT_TYPE_TEXT","RE_ENDS_WITH_S","RE_TLS_PROTOCOL","RE_URL_PARAMETERS","SUPPORTED_REQUEST_OPTIONS","coalesce","args","filter","value","isEmpty","ensureOptions","isObject","url","parse","headerExists","headers","name","toLowerCase","length","some","result","toString","test","mergeOptions","options","forEach","option","maxRedirectCount","maxRetryCount","timeout","query","squareBracketNotation","param","join","Date","toISOString","path","qs","stringify","parseUrlPattern","urlPattern","parts","match","parameters","split","parameter","push","regEx","RegExp","buldSerializedQueryParam","document","serializedKey","key","resultQuery","Request","data","callback","executeRequest","requestContentType","self","state","failover","index","values","redirects","tries","Buffer","isBuffer","byteLength","field","slice","concat","map","hostname","portIndex","indexOf","port","substr","isNaN","protocol","host","proxy","secure","resolve","reject","clientRequest","emit","client","https","http","chunks","contentType","json","code","statusCode","err","Error","redirectUrl","previousRequestProtocol","href","context","stream","contentParts","setEncoding","ex","on","chunk","body","JSON","setTimeout","abort","write","end","then","method","call","events","EventEmitter","Resource","urlParts","post","get","put","module","exports"],"mappings":"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","sourcesContent":["import events from 'events';\nimport http from 'http';\nimport https from 'https';\nimport path from 'path';\nimport qs from 'querystring';\nimport url from 'url';\n\nconst\n\tDEFAULTS = {\n\t\tBASE_TEN : 10,\n\t\tFAILOVER_ERROR_CODES : [\n\t\t\t'ECONNREFUSED',\n\t\t\t'ECONNRESET',\n\t\t\t'ENOTFOUND'\n\t\t],\n\t\tHTTP_ERROR_CODE_RETRY_THRESHHOLD : 500,\n\t\tHTTP_ERROR_CODE_THRESHHOLD : 400,\n\t\tHTTP_PORT : 80,\n\t\tHTTPS_PORT : 443,\n\t\tMAX_REDIRECT_COUNT : 5,\n\t\tMAX_RETRY_COUNT : 3,\n\t\tTIMEOUT : 60000\n\t},\n\tEVENTS = {\n\t\terror : 'error',\n\t\tredirect : 'redirect',\n\t\trequest :'request',\n\t\tresponse : 'response',\n\t\tretry : 'retry'\n\t},\n\tHTTP_HEADERS = {\n\t\tCONNECTION : 'Connection',\n\t\tCONTENT_LENGTH : 'Content-Length',\n\t\tCONTENT_TYPE : 'Content-Type',\n\t\tHOST : 'Host',\n\t\tLOCATION : 'Location'\n\t},\n\t// reference: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#3xx_Redirection\n\tHTTP_STATUS_CODES = {\n\t\tNO_CONTENT : 204,\n\t\tPROXY_REQUIRED : 305,\n\t\tREDIRECT_CODE_PERM : 301,\n\t\tREDIRECT_CODE_TEMP : 302,\n\t\tREDIRECT_NEW_CODE_PERM : 308,\n\t\tREDIRECT_NEW_CODE_TEMP : 307\n\t},\n\tRE_CHARSET = /\\ charset\\=(a-z\\-0-9)*/i,\n\tRE_CONTENT_TYPE_JSON = /json/i,\n\tRE_CONTENT_TYPE_TEXT = /json|xml|yaml|html|text|jwt/i,\n\tRE_ENDS_WITH_S = /s$/i,\n\tRE_TLS_PROTOCOL = /^https\\:?/i,\n\tRE_URL_PARAMETERS = /(\\/\\:([a-z0-9\\_\\-\\~\\.]*))*/gi,\n\tSUPPORTED_REQUEST_OPTIONS = [\n\t\t'agent',\n\t\t'auth',\n\t\t'family',\n\t\t'headers',\n\t\t'host',\n\t\t'hostname',\n\t\t'hosts', // custom\n\t\t'hostnames', // custom\n\t\t// 'keepAlive', // custom\n\t\t// 'keepAliveMsecs', // custom\n\t\t'localAddress',\n\t\t'maxRedirectCount', // custom\n\t\t'maxRetryCount', // custom\n\t\t'method',\n\t\t'path',\n\t\t'pathname',\n\t\t'port',\n\t\t'protocol', // use to determine HTTPS or HTTP\n\t\t'proxy', // added in v1.0.9\n\t\t'query', // custom\n\t\t'rejectUnauthorized',\n\t\t'socketPath',\n\t\t'timeout'\n\t];\n\nfunction coalesce (...args) {\n\treturn args.filter((value) => !isEmpty(value))[0];\n}\n\nfunction ensureOptions (value) {\n\tif (!isObject(value) && typeof value === 'string') {\n\t\treturn url.parse(value);\n\t}\n\n\treturn value;\n}\n\nfunction headerExists (headers, name) {\n\treturn !isEmpty(headers[name]) || !isEmpty(headers[name.toLowerCase()]);\n}\n\nfunction isEmpty (value) {\n\treturn (value === null || [\n\t\ttypeof value === 'undefined',\n\t\ttypeof value === 'string' && !value.length,\n\t\tArray.isArray(value) && !value.length,\n\t\tisObject(value) && !Object.keys(value).length\n\t].some((result) => result));\n}\n\nfunction isObject (value) {\n\treturn ![\n\t\tvalue === null,\n\t\ttypeof value === 'undefined',\n\t\ttypeof value !== 'object',\n\t\tArray.isArray(value),\n\t\tvalue && value.toString && !(/^\\[object\\sObject\\]$/.test(value.toString()))\n\t].some((result) => result);\n}\n\nfunction mergeOptions (request, options = {}) {\n\tlet result = {};\n\n\t// ensure request options exist\n\trequest = request || {};\n\trequest.options = request.options || {};\n\n\tSUPPORTED_REQUEST_OPTIONS.forEach((option) => {\n\t\tlet value = coalesce(options[option], request.options[option]);\n\n\t\tif (!isEmpty(value)) {\n\t\t\tresult[option] = value;\n\t\t}\n\t});\n\n\t// TODO: apply keep-alive\n\n\t// apply redirect\n\tresult.maxRedirectCount = coalesce(\n\t\tresult.maxRedirectCount,\n\t\tDEFAULTS.MAX_REDIRECT_COUNT);\n\n\t// apply retry\n\tresult.maxRetryCount = coalesce(\n\t\tresult.maxRetryCount,\n\t\tDEFAULTS.MAX_RETRY_COUNT);\n\n\t// apply timeout\n\tresult.timeout = coalesce(\n\t\tresult.timeout,\n\t\tDEFAULTS.TIMEOUT);\n\n\t// validate the query\n\tif (!isEmpty(result.query)) {\n\t\t// format objects using square-bracket notation\n\t\tresult.query = squareBracketNotation(result.query);\n\n\t\t// serialization adjustments for querystring\n\t\tObject.keys(result.query).forEach((param) => {\n\t\t\t// ensure arrays in querystring are properly serialized...\n\t\t\tif (Array.isArray(result.query[param]) && result.query[param].length > 1) {\n\t\t\t\tresult.query[param] = result.query[param].join(',');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// turn date objects into ISO strings\n\t\t\tif (result.query[param] instanceof Date) {\n\t\t\t\tresult.query[param] = result.query[param].toISOString();\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\n\t\t// ensure the path is properly set\n\t\tresult.path = [\n\t\t\tresult.path,\n\t\t\tqs.stringify(result.query)].join('?');\n\t}\n\n\treturn result;\n}\n\nfunction parseUrlPattern (urlPattern) {\n\tlet parts = url.parse(urlPattern);\n\n\t// determine parameters within the URL (if applicable)\n\tparts.path\n\t\t.match(RE_URL_PARAMETERS)\n\t\t// .filter((match) => RE_URL_PARAMETERS.test(match))\n\t\t.forEach((match) => {\n\t\t\tlet parameters = match.split(RE_URL_PARAMETERS);\n\t\t\tif (!parameters.length) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// ensure parameters exist on the response\n\t\t\tparts.parameters = parts.parameters || [];\n\n\t\t\t// iterate each match\n\t\t\tparameters\n\t\t\t\t.filter((parameter) => !isEmpty(parameter))\n\t\t\t\t.forEach((parameter) => {\n\t\t\t\t\t// isolate the parameters from the URL\n\t\t\t\t\tif (!/^\\//.test(parameter)) {\n\t\t\t\t\t\tparts.parameters.push({\n\t\t\t\t\t\t\tname : parameter,\n\t\t\t\t\t\t\tregEx : new RegExp(`\\:${parameter}`)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\treturn parts;\n}\n\nfunction squareBracketNotation (query) {\n\tif (isEmpty(query)) {\n\t\treturn query;\n\t}\n\n\tlet\n\t\tbuldSerializedQueryParam = (document, serializedKey = '') => Object\n\t\t\t.keys(document)\n\t\t\t.forEach((key) => {\n\t\t\t\tif (isEmpty(document[key])) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!isObject(document[key])) {\n\t\t\t\t\tresultQuery[serializedKey ? `${serializedKey}[${key}]` : key] = document[key];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn buldSerializedQueryParam(\n\t\t\t\t\tdocument[key],\n\t\t\t\t\tserializedKey ? `${serializedKey}[${key}]` : key);\n\t\t\t}),\n\t\tresultQuery = {};\n\n\t// kick off the serialization\n\tbuldSerializedQueryParam(query);\n\n\treturn resultQuery;\n}\n\nclass Request extends events.EventEmitter {\n\tconstructor (options) {\n\t\tsuper();\n\t\tthis.options = options;\n\t}\n\n\tcall (options, data, callback) {\n\t\tlet\n\t\t\texecuteRequest,\n\t\t\trequestContentType,\n\t\t\tself = this,\n\t\t\tstate = {};\n\n\t\tif (typeof data === 'function') {\n\t\t\tcallback = data;\n\t\t\tdata = '';\n\t\t}\n\n\t\tif (typeof options === 'function') {\n\t\t\tcallback = options;\n\t\t\tdata = '';\n\t\t\toptions = {};\n\t\t}\n\n\t\t// ensure default values for state\n\t\tstate.data = data || '';\n\t\tstate.failover = {\n\t\t\tindex : 0,\n\t\t\tvalues : []\n\t\t};\n\t\tstate.redirects = state.redirects || [];\n\t\tstate.tries = state.tries || 1;\n\n\t\t// ensure default values for all request options\n\t\toptions = mergeOptions(this, options);\n\t\toptions.headers = options.headers || {};\n\n\t\t// check to see if content-type is specified\n\t\trequestContentType = coalesce(\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_TYPE],\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_TYPE.toLowerCase()]);\n\n\t\t// default the content type if not provided...\n\t\tif (!requestContentType) {\n\t\t\t// apply application/json header as default (this is opinionated)\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_TYPE] = 'application/json';\n\t\t\trequestContentType = 'application/json';\n\t\t}\n\n\t\t// ensure serialization of data\n\t\tif (typeof state.data !== 'string' && !Buffer.isBuffer(state.data)) {\n\t\t\tif (RE_CONTENT_TYPE_JSON.test(requestContentType)) {\n\t\t\t\tstate.data = JSON.stringify(data);\n\t\t\t} else if (data && data.toString && typeof data.toString === 'function') {\n\t\t\t\tstate.data = data.toString();\n\t\t\t}\n\n\t\t\t// TODO: handle when state.data might not be a string or Buffer\n\t\t}\n\n\t\t// apply content length header\n\t\tif (typeof state.data === 'string') {\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] =\n\t\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] ||\n\t\t\t\tBuffer.byteLength(state.data);\n\t\t}\n\n\t\tif (Buffer.isBuffer(state.data)) {\n\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] =\n\t\t\t\toptions.headers[HTTP_HEADERS.CONTENT_LENGTH] ||\n\t\t\t\tstate.data.length;\n\t\t}\n\n\t\t// setup failover if applicable\n\t\t['host', 'hostname', 'hostnames', 'hosts'].forEach((field) => {\n\t\t\tlet key = RE_ENDS_WITH_S.test(field) ?\n\t\t\t\tfield.slice(0, -1) :\n\t\t\t\tfield;\n\n\t\t\t// if the host or hostname field value is an Array\n\t\t\t// map the values into the state.failover\n\t\t\tif (Array.isArray(options[field])) {\n\t\t\t\tstate.failover.values = state.failover.values\n\t\t\t\t\t.concat(options[field].map((value) => ({ key, value })));\n\n\t\t\t\t// clear the failover settings from the options as it will be overridden\n\t\t\t\tdelete options[field];\n\t\t\t}\n\t\t});\n\n\t\t// set the current default host/hostname if failover options are present\n\t\tif (state.failover.values.length) {\n\t\t\toptions[state.failover.values[state.failover.index].key] =\n\t\t\t\tstate.failover.values[state.failover.index].value;\n\t\t}\n\n\t\t// correct for port in the hostname field...\n\t\tif (!isEmpty(options.hostname)) {\n\t\t\tlet portIndex = options.hostname.indexOf(':');\n\n\t\t\tif (portIndex > 0) {\n\t\t\t\t// set port, host and hostname correctly\n\t\t\t\toptions.port = parseInt(\n\t\t\t\t\tcoalesce(options.port, options.hostname.substr(portIndex + 1)),\n\t\t\t\t\tDEFAULTS.BASE_TEN);\n\n\t\t\t\t// correct port if invalid value is provided\n\t\t\t\tif (isNaN(options.port)) {\n\t\t\t\t\toptions.port = RE_TLS_PROTOCOL.test(options.protocol) ? \n\t\t\t\t\t\tDEFAULTS.HTTPS_PORT : \n\t\t\t\t\t\tDEFAULTS.HTTPS_PORT;\n\t\t\t\t\t\n\t\t\t\t\toptions.hostname = [\n\t\t\t\t\t\toptions.hostname.substr(0, portIndex), \n\t\t\t\t\t\toptions.port].join(':');\n\t\t\t\t}\n\n\t\t\t\toptions.host = options.hostname;\n\t\t\t\toptions.hostname = options.hostname.substr(0, portIndex);\n\t\t\t}\n\t\t}\n\n\t\t// apply proxy server options when specified\n\t\tif (!isEmpty(options.proxy)) {\n\t\t\tlet\n\t\t\t\thost = options.host || options.hostname,\n\t\t\t\tproxy = url.parse(options.proxy);\n\t\t\t\n\t\t\t// set Host header value to destination server for web proxy request\n\t\t\toptions.headers[HTTP_HEADERS.HOST] = host;\n\n\t\t\t// ensure the path property includes the full destination URL (with port of provided)\n\t\t\tif (options.path.indexOf(host) < 0) {\n\t\t\t\tif (options.port && [DEFAULTS.HTTP_PORT, DEFAULTS.HTTPS_PORT].indexOf(options.port) < 0) {\n\t\t\t\t\thost = [host, options.port].join(':');\n\t\t\t\t}\n\n\t\t\t\toptions.path = [\n\t\t\t\t\toptions.secure ? 'https' : 'http',\n\t\t\t\t\tpath.join(host, options.path)].join('://');\n\t\t\t}\n\n\t\t\t// Set host, hostname, port and protocol for request to web proxy server\n\t\t\toptions.host = proxy.host;\n\t\t\toptions.hostname = proxy.hostname;\n\t\t\toptions.port = proxy.port;\n\t\t\toptions.protocol = proxy.protocol;\n\t\t}\n\n\t\t// apply keep-alive header when specified\n\t\t/*\n\t\tif (options.keepAlive && !headerExists(options.headers, HTTP_HEADERS.CONNECTION)) {\n\t\t\toptions.headers[HTTP_HEADERS.CONNECTION] = 'keep-alive';\n\t\t}\n\t\t//*/\n\n\t\texecuteRequest = new Promise((resolve, reject) => {\n\t\t\tlet clientRequest = () => {\n\t\t\t\t// emit request event\n\t\t\t\tself.emit(EVENTS.request, {\n\t\t\t\t\toptions,\n\t\t\t\t\tstate\n\t\t\t\t});\n\n\t\t\t\tlet client = (RE_TLS_PROTOCOL.test(options.protocol) ? https : http).request(\n\t\t\t\t\toptions,\n\t\t\t\t\t(response) => {\n\t\t\t\t\t\tlet\n\t\t\t\t\t\t\tchunks = [],\n\t\t\t\t\t\t\tcontentType = coalesce(\n\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.CONTENT_TYPE],\n\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.CONTENT_TYPE.toLowerCase()]),\n\t\t\t\t\t\t\tjson = RE_CONTENT_TYPE_JSON.test(contentType),\n\t\t\t\t\t\t\tredirect = [\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_CODE_PERM,\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_CODE_TEMP,\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_NEW_CODE_PERM,\n\t\t\t\t\t\t\t\tHTTP_STATUS_CODES.REDIRECT_NEW_CODE_TEMP\n\t\t\t\t\t\t\t].some((code) => (code === response.statusCode));\n\n\t\t\t\t\t\t// track response headers and status\n\t\t\t\t\t\tstate.headers = response.headers;\n\t\t\t\t\t\tstate.statusCode = response.statusCode;\n\n\t\t\t\t\t\t// emit response event\n\t\t\t\t\t\tself.emit(EVENTS.response, {\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// determine if a proxy server is required...\n\t\t\t\t\t\tif (state.statusCode === HTTP_STATUS_CODES.PROXY_REQUIRED) {\n\t\t\t\t\t\t\tlet err = new Error('proxy required');\n\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// determine if a redirect has been detected\n\t\t\t\t\t\tif (redirect) {\n\t\t\t\t\t\t\tif (!headerExists(state.headers, HTTP_HEADERS.LOCATION)) {\n\t\t\t\t\t\t\t\tlet err = new Error('redirect requested with no location');\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (state.redirects.length >= options.maxRedirectCount) {\n\t\t\t\t\t\t\t\tlet err = new Error('maximum redirect limit exceeded');\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// read location from headers\n\t\t\t\t\t\t\tlet redirectUrl = url.parse(coalesce(\n\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.LOCATION],\n\t\t\t\t\t\t\t\tresponse.headers[HTTP_HEADERS.LOCATION.toLowerCase()]));\n\n\t\t\t\t\t\t\t// set protocol when missing (i.e. location begins with '//' instead of protocol)\n\t\t\t\t\t\t\tif (isEmpty(redirectUrl.protocol)) {\n\t\t\t\t\t\t\t\tlet previousRequestProtocol = state.redirects.length ?\n\t\t\t\t\t\t\t\t\tstate.redirects[state.redirects.length - 1].protocol :\n\t\t\t\t\t\t\t\t\toptions.protocol;\n\n\t\t\t\t\t\t\t\tredirectUrl = url.parse([previousRequestProtocol, redirectUrl.href].join(''));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// remap options for next request\n\t\t\t\t\t\t\tObject.assign(options, redirectUrl);\n\n\t\t\t\t\t\t\t// increment number of redirects (to avoid endless looping)\n\t\t\t\t\t\t\tstate.redirects.push(redirectUrl);\n\n\t\t\t\t\t\t\t// emit redirect event\n\t\t\t\t\t\t\tself.emit(EVENTS.redirect, {\n\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// re-request based on the redirect location\n\t\t\t\t\t\t\treturn setImmediate(clientRequest);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// utilize content-type to understand if response should be a stream\n\t\t\t\t\t\t// assume missing content-type header indicates text value\n\t\t\t\t\t\tif (contentType && !RE_CONTENT_TYPE_TEXT.test(contentType)) {\n\t\t\t\t\t\t\tif (context.statusCode >= DEFAULTS.HTTP_ERROR_CODE_THRESHHOLD) {\n\t\t\t\t\t\t\t\tlet err = new Error('HTTP error received for streaming Content-Type');\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\t\t\t\t\t\t\t\terr.stream = response;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn resolve(response);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// handle the response encoding...\n\t\t\t\t\t\tif (!isEmpty(contentType)) {\n\t\t\t\t\t\t\tlet contentParts = contentType.split(RE_CHARSET);\n\n\t\t\t\t\t\t\t// if a charset was specified, apply it\n\t\t\t\t\t\t\tif (contentParts.length > 1) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tresponse.setEncoding(contentParts[contentParts.length - 1]);\n\t\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t\t// TODO: handle warning...\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresponse.on('data', (chunk) => chunks.push(chunk));\n\n\t\t\t\t\t\tresponse.on('end', () => {\n\t\t\t\t\t\t\tlet\n\t\t\t\t\t\t\t\tbody = chunks.join(''),\n\t\t\t\t\t\t\t\terror = state.statusCode >= DEFAULTS.HTTP_ERROR_CODE_THRESHHOLD,\n\t\t\t\t\t\t\t\tretry =\n\t\t\t\t\t\t\t\t\tstate.statusCode >= DEFAULTS.HTTP_ERROR_CODE_RETRY_THRESHHOLD &&\n\t\t\t\t\t\t\t\t\tstate.tries <= options.maxRetryCount,\n\t\t\t\t\t\t\t\tstatusCode = response.statusCode;\n\n\t\t\t\t\t\t\tif (json && statusCode !== HTTP_STATUS_CODES.NO_CONTENT && body.length) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tbody = JSON.parse(body);\n\t\t\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\t\t\tlet err = new Error('unable to parse JSON from response');\n\t\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\t\terr.state = state;\n\n\t\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// retry request when an error above the threshhold is received\n\t\t\t\t\t\t\tif (retry) {\n\t\t\t\t\t\t\t\t// emit retry event\n\t\t\t\t\t\t\t\tself.emit(EVENTS.retry, {\n\t\t\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t// increment try count\n\t\t\t\t\t\t\t\tstate.tries += 1;\n\n\t\t\t\t\t\t\t\treturn clientRequest();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (error) {\n\t\t\t\t\t\t\t\tlet err = new Error('HTTP error received');\n\t\t\t\t\t\t\t\terr.body = body;\n\t\t\t\t\t\t\t\terr.options = options;\n\t\t\t\t\t\t\t\terr.state = state;\n\t\t\t\t\t\t\t\terr.statusCode = statusCode;\n\n\t\t\t\t\t\t\t\treturn reject(err);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn resolve(body);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\tclient.on(EVENTS.error, (err) => {\n\t\t\t\t\tlet failover = (\n\t\t\t\t\t\tstate.failover.values.length &&\n\t\t\t\t\t\terr.code &&\n\t\t\t\t\t\tDEFAULTS.FAILOVER_ERROR_CODES.indexOf(err.code) !== -1);\n\n\t\t\t\t\t// check for failover\n\t\t\t\t\tif (failover) {\n\t\t\t\t\t\tstate.tries += 1;\n\t\t\t\t\t\tstate.failover.index = (\n\t\t\t\t\t\t\tstate.failover.index === state.failover.values.length - 1 ?\n\t\t\t\t\t\t\t\t0 :\n\t\t\t\t\t\t\t\tstate.failover.index + 1);\n\n\t\t\t\t\t\tif (state.tries <= state.failover.values.length) {\n\t\t\t\t\t\t\t// remove host and hostname from options to prevent conflict with prior request\n\t\t\t\t\t\t\tdelete options.hostname;\n\t\t\t\t\t\t\tdelete options.host;\n\n\t\t\t\t\t\t\toptions[state.failover.values[state.failover.index].key] =\n\t\t\t\t\t\t\t\tstate.failover.values[state.failover.index].value;\n\n\t\t\t\t\t\t\treturn setImmediate(clientRequest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// retry if below retry count threshhold\n\t\t\t\t\tif (state.tries <= options.maxRetryCount) {\n\t\t\t\t\t\tstate.tries += 1;\n\t\t\t\t\t\treturn setImmediate(clientRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reject(err);\n\t\t\t\t});\n\n\t\t\t\t// apply request timeout\n\t\t\t\tif (options.timeout) {\n\t\t\t\t\t// convert timeout to a number if provided as a string\n\t\t\t\t\tif (typeof options.timeout === 'string') {\n\t\t\t\t\t\toptions.timeout = parseInt(options.timeout, DEFAULTS.BASE_TEN);\n\t\t\t\t\t}\n\n\t\t\t\t\tclient.setTimeout(options.timeout, client.abort);\n\t\t\t\t}\n\n\t\t\t\t// send data\n\t\t\t\tif (state.data && (typeof state.data === 'string' || Buffer.isBuffer(state.data))) {\n\t\t\t\t\tclient.write(state.data);\n\t\t\t\t}\n\n\t\t\t\t// finish up the client stream and end to send\n\t\t\t\tclient.end();\n\t\t\t};\n\n\t\t\tclientRequest();\n\t\t});\n\n\t\t// return Promise for async/await or then/catch\n\t\tif (isEmpty(callback)) {\n\t\t\treturn executeRequest;\n\t\t}\n\n\t\t// execute and return results in callback\n\t\treturn executeRequest\n\t\t\t.then((result) => callback(null, result))\n\t\t\t.catch(callback);\n\t}\n\n\tgetOptions (options = {}) {\n\t\treturn mergeOptions(this, options);\n\t}\n\n\t// delete\n\tasync delete (options = {}, callback) {\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'DELETE';\n\t\treturn await this.call(options, callback);\n\t}\n\n\t// get\n\tasync get (options = {}, callback) {\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'GET';\n\t\treturn await this.call(options, callback);\n\t}\n\n\t// head\n\tasync head (options = {}, callback) {\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'HEAD';\n\t\treturn await this.call(options, callback);\n\t}\n\n\t// patch\n\tasync patch (options = {}, data, callback) {\n\t\tif (typeof data === 'function' && isEmpty(callback)) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'PATCH';\n\t\treturn await this.call(options, data, callback);\n\t}\n\n\t// post\n\tasync post (options = {}, data, callback) {\n\t\tif (typeof data === 'function' && isEmpty(callback)) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'POST';\n\t\treturn await this.call(options, data, callback);\n\t}\n\n\t// put\n\tasync put (options = {}, data, callback) {\n\t\tif (typeof data === 'function' && isEmpty(callback)) {\n\t\t\tcallback = data;\n\t\t\tdata = null;\n\t\t}\n\n\t\tif (typeof options === 'function' && isEmpty(callback)) {\n\t\t\tcallback = options;\n\t\t\toptions = {};\n\t\t}\n\n\t\toptions = ensureOptions(options);\n\t\toptions.method = 'PUT';\n\t\treturn await this.call(options, data, callback);\n\t}\n}\n\nclass Resource {\n\tconstructor (urlPattern, options) {\n\t\tif (isEmpty(urlPattern)) {\n\t\t\tthrow new Error('urlPattern argument is required');\n\t\t}\n\n\t\tthis.request = new Request(options);\n\t\tthis.urlParts = parseUrlPattern(urlPattern);\n\t}\n\n\tasync create (data, callback) {\n\t\tlet options = this.urlParts;\n\n\t\treturn await this.request.post(options, data, callback);\n\t}\n\n\tasync delete (...args) {\n\t\tlet\n\t\t\tcallback = args && typeof args[args.length - 1] === 'function' ?\n\t\t\t\targs[args.length - 1] :\n\t\t\t\tcallback,\n\t\t\toptions = this.urlParts;\n\n\t\t// TODO: map values based on urlParts.parameters\n\t\toptions.query = args;\n\n\t\treturn await this.request.delete(options, callback);\n\t}\n\n\tasync retrieve (...args) {\n\t\tlet\n\t\t\tcallback = args && typeof args[args.length - 1] === 'function' ?\n\t\t\t\targs[args.length - 1] :\n\t\t\t\tcallback,\n\t\t\toptions = this.urlParts;\n\n\t\t// TODO: map values based on urlParts.parameters\n\t\toptions.query = args;\n\n\t\treturn await this.request.get(options, callback);\n\t}\n\n\tasync update (data, callback) {\n\t\tlet options = this.urlParts;\n\n\t\treturn await this.request.put(options, data, callback);\n\t}\n}\n\nmodule.exports = { Request, Resource };"],"file":"index.js"}